#!/bin/bash

CMD=$1
CWD=$(pwd)

: "${WHARF_HOST:?not set or empty}"
: "${WHARF_USER:?not set or empty}"

# Figure out where the actual script lives,
# so we can find the playbooks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# Create the hosts inventory file
INVENTORY=/tmp/wharf_hosts.ini
sed 's/HOST/'"$WHARF_HOST"'/' $DIR/hosts.ini | sed 's/USER/'"$WHARF_USER"'/' > $INVENTORY

# shift the args so that $2 is now $1
shift

if [ -z $CMD ]; then
    echo "Please specify a command: ls, deploy, destroy"
    exit 1

elif [ $CMD == 'deploy' ]; then
    APP_NAME=$1
    APP_PLAYBOOK=$2
    APP_TARGET_HOST=$3
    if [ -z $APP_NAME ]; then
        echo "Specify an app name"
        exit 1
    fi
    if [ -z $APP_PLAYBOOK ]; then
        echo "Specify an app playbook path"
        exit 1
    fi
    if [ -z $APP_TARGET_HOST ]; then
        echo "Specify a target host and port"
        exit 1
    fi

    IFS=: read DOMAIN_NAME APP_PORT <<< $APP_TARGET_HOST
    if [ -z $DOMAIN_NAME ]; then
        echo "Specify an app port"
        exit 1
    fi
    if [ -z $APP_PORT ]; then
        echo "Specify an app port"
        exit 1
    fi

    # Check if playbook path is relative
    if [[ ! "$APP_PLAYBOOK" = /* ]]; then
        APP_PLAYBOOK=$CWD/$APP_PLAYBOOK
    fi

    ansible-playbook -i $INVENTORY $DIR/deploy.yml \
        -e "app_name=${APP_NAME}" \
        -e "app_port=${APP_PORT}" \
        -e "app_playbook=${APP_PLAYBOOK}" \
        -e "domain_name=${DOMAIN_NAME}"

elif [ $CMD == 'destroy' ]; then
    APP_NAME=$1
    if [ -z $APP_NAME ]; then
        echo "Specify an app name"
        exit 1
    fi

    ansible-playbook -i $INVENTORY $DIR/destroy.yml -e "app_name=${APP_NAME}"

elif [ $CMD == 'log' ]; then
    APP_NAME=$1
    if [ -z $APP_NAME ]; then
        echo "Specify an app name"
        exit 1
    fi

    ssh $WHARF_USER@$WHARF_HOST 'docker logs -f -t '$APP_NAME

elif [ $CMD == 'bash' ]; then
    APP_NAME=$1
    if [ -z $APP_NAME ]; then
        echo "Specify an app name"
        exit 1
    fi

    ssh -tt $WHARF_USER@$WHARF_HOST 'docker exec -it '$APP_NAME' bash'

elif [ $CMD == 'restart' ]; then
    APP_NAME=$1
    if [ -z $APP_NAME ]; then
        echo "Specify an app name"
        exit 1
    fi

    ssh $WHARF_USER@$WHARF_HOST 'docker restart '$APP_NAME

elif [ $CMD == 'clean' ]; then
    ssh $WHARF_USER@$WHARF_HOST 'docker image prune'

elif [ $CMD == 'ls' ]; then
    ansible wharf -i $INVENTORY -a "/usr/bin/docker ps -a"

else
    echo "Please specify a command: ls, deploy, destroy"
    exit 1

fi